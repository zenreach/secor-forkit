// Code generated by protoc-gen-go. DO NOT EDIT.
// source: split/impression.proto

package split // import "github.com/zenreach/platypus/protocols/split"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Impression struct {
	// key evaluated
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// split name
	Split string `protobuf:"bytes,2,opt,name=split" json:"split,omitempty"`
	// environment id in which we are evaluating the split
	EnvironmentId string `protobuf:"bytes,3,opt,name=environment_id,json=environmentId" json:"environment_id,omitempty"`
	// environment name
	EnvironmentName string `protobuf:"bytes,4,opt,name=environment_name,json=environmentName" json:"environment_name,omitempty"`
	// treatment we gave to this key
	Treatment string `protobuf:"bytes,5,opt,name=treatment" json:"treatment,omitempty"`
	// timestamp when the SDK made the evaluation
	Timestamp *timestamp.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// key used for hashing and to determine the treatment bucket
	BucketingKey string `protobuf:"bytes,7,opt,name=bucketing_key,json=bucketingKey" json:"bucketing_key,omitempty"`
	// the rule that was applied to return a treatment
	Label string `protobuf:"bytes,8,opt,name=label" json:"label,omitempty"`
	// hostname of the SDK host (if available)
	MachineName string `protobuf:"bytes,9,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	// the IP of the SDK host (if available)
	MachineIp string `protobuf:"bytes,10,opt,name=machine_ip,json=machineIp" json:"machine_ip,omitempty"`
	// the version number of the split equivalent to the generation time
	SplitVersionNumber int64 `protobuf:"varint,11,opt,name=split_version_number,json=splitVersionNumber" json:"split_version_number,omitempty"`
	// the SDK language that evaluated the split
	Sdk string `protobuf:"bytes,12,opt,name=sdk" json:"sdk,omitempty"`
	// the SDK version that evaluated the split
	SdkVersion string `protobuf:"bytes,13,opt,name=sdk_version,json=sdkVersion" json:"sdk_version,omitempty"`
	// reserved for future use
	Properties           string   `protobuf:"bytes,14,opt,name=properties" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Impression) Reset()         { *m = Impression{} }
func (m *Impression) String() string { return proto.CompactTextString(m) }
func (*Impression) ProtoMessage()    {}
func (*Impression) Descriptor() ([]byte, []int) {
	return fileDescriptor_impression_db26b58d0dc9c950, []int{0}
}
func (m *Impression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Impression.Unmarshal(m, b)
}
func (m *Impression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Impression.Marshal(b, m, deterministic)
}
func (dst *Impression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Impression.Merge(dst, src)
}
func (m *Impression) XXX_Size() int {
	return xxx_messageInfo_Impression.Size(m)
}
func (m *Impression) XXX_DiscardUnknown() {
	xxx_messageInfo_Impression.DiscardUnknown(m)
}

var xxx_messageInfo_Impression proto.InternalMessageInfo

func (m *Impression) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Impression) GetSplit() string {
	if m != nil {
		return m.Split
	}
	return ""
}

func (m *Impression) GetEnvironmentId() string {
	if m != nil {
		return m.EnvironmentId
	}
	return ""
}

func (m *Impression) GetEnvironmentName() string {
	if m != nil {
		return m.EnvironmentName
	}
	return ""
}

func (m *Impression) GetTreatment() string {
	if m != nil {
		return m.Treatment
	}
	return ""
}

func (m *Impression) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Impression) GetBucketingKey() string {
	if m != nil {
		return m.BucketingKey
	}
	return ""
}

func (m *Impression) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Impression) GetMachineName() string {
	if m != nil {
		return m.MachineName
	}
	return ""
}

func (m *Impression) GetMachineIp() string {
	if m != nil {
		return m.MachineIp
	}
	return ""
}

func (m *Impression) GetSplitVersionNumber() int64 {
	if m != nil {
		return m.SplitVersionNumber
	}
	return 0
}

func (m *Impression) GetSdk() string {
	if m != nil {
		return m.Sdk
	}
	return ""
}

func (m *Impression) GetSdkVersion() string {
	if m != nil {
		return m.SdkVersion
	}
	return ""
}

func (m *Impression) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

func init() {
	proto.RegisterType((*Impression)(nil), "zenreach.split.Impression")
}

func init() { proto.RegisterFile("split/impression.proto", fileDescriptor_impression_db26b58d0dc9c950) }

var fileDescriptor_impression_db26b58d0dc9c950 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcf, 0x8b, 0xd4, 0x30,
	0x14, 0xc7, 0xa9, 0x75, 0x57, 0xfb, 0x3a, 0x33, 0x2e, 0x61, 0x91, 0xb0, 0xa8, 0x3b, 0x2a, 0xc2,
	0x08, 0xd2, 0x8a, 0x5e, 0x3c, 0xef, 0x6d, 0x10, 0xf6, 0x30, 0x88, 0x07, 0x2f, 0x25, 0x6d, 0x9f,
	0x9d, 0xd0, 0xe6, 0x07, 0x49, 0xba, 0xb0, 0xfe, 0xb5, 0xfe, 0x29, 0xd2, 0x97, 0xe9, 0xcc, 0x78,
	0x4b, 0x3e, 0x9f, 0x6f, 0x1e, 0xef, 0x25, 0x81, 0x97, 0xde, 0x0e, 0x32, 0x94, 0x52, 0x59, 0x87,
	0xde, 0x4b, 0xa3, 0x0b, 0xeb, 0x4c, 0x30, 0x6c, 0xf5, 0x07, 0xb5, 0x43, 0xd1, 0xec, 0x0b, 0x0a,
	0xdc, 0xdc, 0x76, 0xc6, 0x74, 0x03, 0x96, 0x64, 0xeb, 0xf1, 0x77, 0x19, 0xa4, 0x42, 0x1f, 0x84,
	0xb2, 0xf1, 0xc0, 0xbb, 0xbf, 0x29, 0xc0, 0xf6, 0x58, 0x85, 0x5d, 0x41, 0xda, 0xe3, 0x23, 0x4f,
	0xd6, 0xc9, 0x26, 0xdb, 0x4d, 0x4b, 0x76, 0x0d, 0x17, 0x54, 0x8a, 0x3f, 0x21, 0x16, 0x37, 0xec,
	0x03, 0xac, 0x50, 0x3f, 0x48, 0x67, 0xb4, 0x42, 0x1d, 0x2a, 0xd9, 0xf2, 0x94, 0xf4, 0xf2, 0x8c,
	0x6e, 0x5b, 0xf6, 0x11, 0xae, 0xce, 0x63, 0x5a, 0x28, 0xe4, 0x4f, 0x29, 0xf8, 0xe2, 0x8c, 0xdf,
	0x0b, 0x85, 0xec, 0x15, 0x64, 0xc1, 0xa1, 0x08, 0x13, 0xe0, 0x17, 0x94, 0x39, 0x01, 0xf6, 0x0d,
	0xb2, 0x63, 0xe7, 0xfc, 0x72, 0x9d, 0x6c, 0xf2, 0x2f, 0x37, 0x45, 0x9c, 0xad, 0x98, 0x67, 0x2b,
	0x7e, 0xcc, 0x89, 0xdd, 0x29, 0xcc, 0xde, 0xc3, 0xb2, 0x1e, 0x9b, 0x1e, 0x83, 0xd4, 0x5d, 0x35,
	0xcd, 0xf6, 0x8c, 0x6a, 0x2f, 0x8e, 0xf0, 0x7b, 0x1c, 0x72, 0x10, 0x35, 0x0e, 0xfc, 0x79, 0x1c,
	0x92, 0x36, 0xec, 0x2d, 0x2c, 0x94, 0x68, 0xf6, 0x52, 0x63, 0xec, 0x3c, 0x23, 0x99, 0x1f, 0x18,
	0x75, 0xfd, 0x1a, 0x60, 0x8e, 0x48, 0xcb, 0x21, 0xb6, 0x7d, 0x20, 0x5b, 0xcb, 0x3e, 0xc3, 0x35,
	0xdd, 0x57, 0xf5, 0x80, 0x6e, 0xba, 0xdf, 0x4a, 0x8f, 0xaa, 0x46, 0xc7, 0xf3, 0x75, 0xb2, 0x49,
	0x77, 0x8c, 0xdc, 0xcf, 0xa8, 0xee, 0xc9, 0x4c, 0x0f, 0xe0, 0xdb, 0x9e, 0x2f, 0xe2, 0x03, 0xf8,
	0xb6, 0x67, 0xb7, 0x90, 0xfb, 0xb6, 0x9f, 0x2b, 0xf0, 0x25, 0x19, 0xf0, 0x6d, 0x7f, 0x38, 0xc8,
	0xde, 0x00, 0x58, 0x67, 0x2c, 0xba, 0x20, 0xd1, 0xf3, 0x55, 0xf4, 0x27, 0x72, 0x77, 0x07, 0xac,
	0x31, 0xaa, 0xf8, 0xff, 0x67, 0xfc, 0xfa, 0xd4, 0xc9, 0xb0, 0x1f, 0xeb, 0xa2, 0x31, 0xaa, 0x9c,
	0x55, 0x69, 0x07, 0x11, 0x1e, 0xed, 0xe8, 0xe3, 0x7f, 0x69, 0xcc, 0xe0, 0x4b, 0x4a, 0xd7, 0x97,
	0x04, 0xbe, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xda, 0xa9, 0x66, 0xef, 0x78, 0x02, 0x00, 0x00,
}
